
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = b'\x91\x95\xa5\xf7\xe0^bz\xc0\xf4\x04\xf9Z\xebA\xba'
    
_lr_action_items = {'+':([4,5,6,7,8,9,15,16,17,18,19,20,],[10,-9,-10,10,-10,-7,-8,-3,-5,-6,-4,10,]),'*':([4,5,6,7,8,9,15,16,17,18,19,20,],[11,-9,-10,11,-10,-7,-8,11,-5,-6,11,11,]),')':([5,7,8,9,15,16,17,18,19,],[-9,15,-10,-7,-8,-3,-5,-6,-4,]),'(':([0,2,3,10,11,12,13,14,],[2,2,2,2,2,2,2,2,]),'/':([4,5,6,7,8,9,15,16,17,18,19,20,],[12,-9,-10,12,-10,-7,-8,12,-5,-6,12,12,]),'=':([6,],[14,]),'-':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[3,3,3,13,-9,-10,13,-10,-7,3,3,3,3,3,-8,-3,-5,-6,-4,13,]),'$end':([1,4,5,6,8,9,15,16,17,18,19,20,],[0,-2,-9,-10,-10,-7,-8,-3,-5,-6,-4,-1,]),'NUMBER':([0,2,3,10,11,12,13,14,],[5,5,5,5,5,5,5,5,]),'NAME':([0,2,3,10,11,12,13,14,],[6,8,8,8,8,8,8,8,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,2,3,10,11,12,13,14,],[4,7,9,16,17,18,19,20,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','calc.py',55),
  ('statement -> expression','statement',1,'p_statement_expr','calc.py',59),
  ('expression -> expression + expression','expression',3,'p_expression_binop','calc.py',63),
  ('expression -> expression - expression','expression',3,'p_expression_binop','calc.py',64),
  ('expression -> expression * expression','expression',3,'p_expression_binop','calc.py',65),
  ('expression -> expression / expression','expression',3,'p_expression_binop','calc.py',66),
  ('expression -> - expression','expression',2,'p_expression_uminus','calc.py',73),
  ('expression -> ( expression )','expression',3,'p_expression_group','calc.py',77),
  ('expression -> NUMBER','expression',1,'p_expression_number','calc.py',81),
  ('expression -> NAME','expression',1,'p_expression_name','calc.py',85),
]
